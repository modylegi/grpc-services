// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/cv.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CVServiceClient is the client API for CVService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CVServiceClient interface {
	GetAllCVs(ctx context.Context, in *GetAllCVsRequest, opts ...grpc.CallOption) (*GetAllCVsResponse, error)
}

type cVServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCVServiceClient(cc grpc.ClientConnInterface) CVServiceClient {
	return &cVServiceClient{cc}
}

func (c *cVServiceClient) GetAllCVs(ctx context.Context, in *GetAllCVsRequest, opts ...grpc.CallOption) (*GetAllCVsResponse, error) {
	out := new(GetAllCVsResponse)
	err := c.cc.Invoke(ctx, "/CVService/GetAllCVs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CVServiceServer is the server API for CVService service.
// All implementations must embed UnimplementedCVServiceServer
// for forward compatibility
type CVServiceServer interface {
	GetAllCVs(context.Context, *GetAllCVsRequest) (*GetAllCVsResponse, error)
	mustEmbedUnimplementedCVServiceServer()
}

// UnimplementedCVServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCVServiceServer struct {
}

func (UnimplementedCVServiceServer) GetAllCVs(context.Context, *GetAllCVsRequest) (*GetAllCVsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCVs not implemented")
}
func (UnimplementedCVServiceServer) mustEmbedUnimplementedCVServiceServer() {}

// UnsafeCVServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CVServiceServer will
// result in compilation errors.
type UnsafeCVServiceServer interface {
	mustEmbedUnimplementedCVServiceServer()
}

func RegisterCVServiceServer(s grpc.ServiceRegistrar, srv CVServiceServer) {
	s.RegisterService(&CVService_ServiceDesc, srv)
}

func _CVService_GetAllCVs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllCVsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CVServiceServer).GetAllCVs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CVService/GetAllCVs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CVServiceServer).GetAllCVs(ctx, req.(*GetAllCVsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CVService_ServiceDesc is the grpc.ServiceDesc for CVService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CVService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CVService",
	HandlerType: (*CVServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllCVs",
			Handler:    _CVService_GetAllCVs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/cv.proto",
}
